pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "manindersinghdhote/snake"
        K8_CLUSTER_NAME = "kubernetes"
        K8_DEPLOYMENT_NAME = "snake-app-new"
        K8_NAMESPACE = "default"  // Change if you want a different namespace
        K8_SERVICE_NAME = "snake-app-service-new"  // Service name for the exposed app
        K8_NODE_PORT = 30001  // Desired NodePort (must be in the range 30000-32767)
    }

    stages {
        stage('Pull Docker Image from DockerHub') {
            steps {
                script {
                    echo "Pulling Docker image ${DOCKER_IMAGE} from DockerHub"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kube-config']) {
                        sh """

                        kubectl --context=${K8_CLUSTER_NAME} create deployment ${K8_DEPLOYMENT_NAME} --image=${DOCKER_IMAGE}:latest --namespace=${K8_NAMESPACE}
   

                        # Deploy the application
                        kubectl create deployment ${K8_DEPLOYMENT_NAME} --image=${DOCKER_IMAGE}:latest --namespace=${K8_NAMESPACE} || echo "Deployment already exists"
                        
                        # Update the image for the deployment
                        kubectl set image deployment/${K8_DEPLOYMENT_NAME} snake=${DOCKER_IMAGE}:latest --namespace=${K8_NAMESPACE}
                        
                        # Wait for the rollout to complete
                        kubectl rollout status deployment/${K8_DEPLOYMENT_NAME} --namespace=${K8_NAMESPACE}
                        
                        # Expose the deployment as a NodePort service
                        kubectl expose deployment ${K8_DEPLOYMENT_NAME} --type=NodePort --name=${K8_SERVICE_NAME} --namespace=${K8_NAMESPACE} --port=80 --target-port=3000 --node-port=${K8_NODE_PORT} || echo "Service already exists"
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment and service exposure were successful!"
        }
        failure {
            echo "There was a problem with the pipeline execution!"
        }
    }
}
